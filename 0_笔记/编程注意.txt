1.必须在源文件中非注释的第一行指明这个文件属于哪个包(原则为所在文件夹)，如：package main。
    1.package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。
    2.可以文件夹下的多个 go 文件包名必须相同(在导入包时全部导入)
    3.所有的包名都应该使用小写字母

2.Go 语言有统一的格式化方案，虽然限制了书写上的自由但统一了格式。
  Go 语言用换行作为语句的结束符，除非多条语句写在同一行，则用;作为语句分割。

3.导入一系列包
    import "fmt"
  或:
  import (
       "fmt"
       "os"
    )
  或: import ("fmt"; "os")
  注意:当多个包时,最好按照字母顺序排列包名，这样做更加清晰易读

4.当标识符以一个大写字母开头如：Group1，
    那么使用这种形式的标识符的对象就可以被外部包的代码所使用(即:public)
   标识符如果以小写字母开头，则对包外是不可见的，
    但是他们在整个包的内部是可见并且可用的（即:private ）。

5.格式非常重要
    1.函数里的代码（函数体）使用大括号 {} 括起来。
      左大括号 { 必须与方法的声明放在同一行
    2.在多段注释之间应以空行分隔加以区分
    3.在 package 语句之前的块注释将被默认认为是这个包的文档说明

6.一个包可以分散在多个文件中,只需要在每一个文件的第一行 package 注明即可

7.数值类型:
    基本类型，如：int、float、bool、string；
    结构化的（复合的），如：struct、array、slice、map、channel；
    只描述类型的行为的，如：interface。

8.使用 var 声明的变量的值会自动初始化为该类型的零值

9.一个函数可以拥有多返回值，返回类型之间需要使用逗号分割

10.使用格式化说明符时
    %s 代表字符串标识符
    %v 代表使用类型的默认输出格式的标识符
    %d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字）
    %g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法）
    %0nd 用于规定输出长度为n的整数，其中开头的数字 0 是必须的。

11.类型放在标志服后面,无论是变量还是方法
    var a int = 11
    func sum(a int, b int) int {
	    return a + b
    }

12. range 相当于迭代器用于遍历 数组,切片,map
    var m = map[string] int {"a": 1, "b": 2}
    for key, value := range m {
        fmt.Printf("key: %s, value: %d\n", key, value)
    }

    arr := [5]int{1, 2, 3, 4, 5}
    for i, v := range arr {
        fmt.Printf("i: %d, v: %d\n", i, v)
    }

13.很强的依赖管理机制,当你声明一个变量而没有呗使用到时,还在编译阶段提示错误

14. 通过 string(a) 可以将 a 的 ask 码转换成字符格式

15. fmt.Printf("%v %p\n",s1,s1)   //获取元素s1 的值和地址值

16.// 进行类型判断
   	pc,ok := usb.(Phone) 	// 判断传入的 usb 是否为 Phone 类型,如果是的话 ok 为 true,并且 将 usb 转化为 Phone 类型-->pc

17. 取地值 通过&符号来获取一个对象类型的地址值
    *代表的是地址值类型, 通过*可以直接得到此地址值上的对象