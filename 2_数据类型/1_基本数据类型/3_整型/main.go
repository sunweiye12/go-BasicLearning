package main

import "fmt"

/*
数字类型比较多，默认值都是 0。
定义int类型时，默认根据系统类型设置取值范围，
32位系统与int32的值范围相同，64位系统与int64的值范围相同

类型		名称				存储空间		值范围				数据级别
uint8	无符号8位整形		8-bit		0 ~ 2^8-1			百
uint16	无符号16位整形	16-bit		0 ~ 2^16-1			6万多
uint32	无符号32位整形	32-bit		0 ~ 2^32-1			40多亿
uint64	无符号64位整形	64-bit		0 ~ 2^64-1			大到没概念
int8	8位整形			8-bit		-2^7 ~ 2^7-1		正负百
int16	16位整形			16-bit		-2^15 ~ 2^15-1		正负3万多
int32	32位整形			32-bit		--2^31 ~ 2^31-1		正负20多亿
int64	64位整形			64-bit		--2^63 ~ 2^63-1		正负大到没概念
int		整型		系统决定	32位系统为int32的值范围，64位系统为int64的值范围
uintptr	无符号整型	由系统决定	能存放指针地址即可
*/

func main() {
	// 无符号整形，默认值都是0
	var u8 uint8
	var u16 uint16
	var u32 uint32
	var u64 uint64
	fmt.Printf("u8: %d, u16: %d, u32: %d, u64: %d\n", u8, u16, u32, u64) // 默认值都为0
	// 取到他们的最大值
	u8 = 255
	u16 = 65535
	u32 = 4294967295
	u64 = 18446744073709551615
	fmt.Printf("u8: %d, u16: %d, u32: %d, u64: %d\n", u8, u16, u32, u64)

	// 有符号整型
	var i8 int8
	var i16 int16
	var i32 int32
	var i64 int64
	fmt.Printf("i8: %d, i16: %d, i32: %d, i64: %d\n", i8, i16, i32, i64) // 默认值都为0
	i8 = 127
	i16 = 32767
	i32 = 2147483647
	i64 = 9223372036854775807
	fmt.Printf("i8: %d, i16: %d, i32: %d, i64: %d\n", i8, i16, i32, i64)

	// int 型，取值范围32位系统为 int32，64位系统为 int64，取值相同但为不同类型
	var i int
	//i = i32 // 报错，编译不通过，类型不同
	//i = i64 // 报错，编译不通过，类型不同
	i = -9223372036854775808
	fmt.Println("i: ", i)

	// 指针地址
	var p uintptr
	fmt.Printf("p: %v\n", p) // 默认值为0
	p = 18446744073709551615 // 64位系统最大值
	//p = 18446744073709551616 // 报错：超出最大值
	fmt.Printf("p: %v\n", p)
}