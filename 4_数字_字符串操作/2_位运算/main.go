package main

import "fmt"

/*
位运算是直接对数字在内存中存储的二进制数进行操作，所以性能上来讲是最快的运算方式。
位运算一般常见于需要性能优化或复杂的算法中。位运算只作用于整数类型上。
	运算符		释义								运算规则
	&		按位与，两个数对应的二进制位相与			同时为1，则为1，否则为0
	|		按位或，两个数对应的二进制位相或			有一个为1，则为1，否则为0
	^		按位异或，两个数对应的二进制位相异或		二进制位不同，则为1，否则为0
	&^		按位清空	x&^y 如果ybit位上的数是0则取x上对应位置的值，如果ybit位上为1则结果位上取0
			想相当于将 x 按照 y 的 bit 位将 y bit 位为 1 的位置置为 0 返回 x
	<<		左移		左移n位，高位丢弃，低位补0。	左移n位就是乘以2的n次方
	>>		右移		右移n位，高位补0，低位丢弃。	右移n位就是除以2的n次方
*/
func main() {
	var i1, i2, n uint8 // 声明三个变量(1个字节)

	// 按位与 &
	i1 = 2         // 二进制：0000 0010
	i2 = 3         // 二进制：0000 0011
	n = i1 & i2    // 按位与：0000 0010
	fmt.Println(n) // 输出：2

	// 按位或 |
	i1 = 10        // 二进制：0000 1010
	i2 = 20        // 二进制：0001 0100
	n = i1 | i2    // 按位或：0001 1110
	fmt.Println(n) // 输出：30

	// 按位异或 ^
	i1 = 3         // 二进制：0000 0011
	i2 = 4         // 二进制：0000 0100
	n = i1 ^ i2    // 按位异或：0000 0111
	fmt.Println(n) // 输出：7

	// 按位清空 &^
	i1 = 14        // 二进制：0000 1110
	i2 = 20        // 二进制：0001 0100
	n = i1 &^ i2   // 按位清空：0000 1010
	fmt.Println(n) // 输出：10

	// 左移 <<
	i1 = 5         // 二进制 0000 0101
	n = i1 << 2    // 左移2位：0001 0100  	--> 相当于 5 * 2^2
	fmt.Println(n) // 输出：20

	// 右移 >>
	i2 = 15        // 二进制：0000 1111
	n = i2 >> 2    // 右移2位：0000 0011		--> 相当于 15 / 2^2
	fmt.Println(n) // 输出：3
}
